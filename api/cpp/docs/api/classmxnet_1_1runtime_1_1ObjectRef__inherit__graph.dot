digraph "mxnet::runtime::ObjectRef"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{mxnet::runtime::ObjectRef\n|+ _type_is_nullable\l# data_\l|+ ObjectRef()\l+ ObjectRef()\l+ same_as()\l+ operator==()\l+ operator!=()\l+ operator\<()\l+ defined()\l+ get()\l+ operator-\>()\l+ unique()\l+ as()\l# get_mutable()\l# DowncastNoCheck()\l# GetDataPtr()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="Base class of all object reference."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{mxnet::Array\< T, typename \>\n||+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ Array()\l+ operator=()\l+ operator=()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1Array.html",tooltip="Array container of NodeRef in DSL graph. Array implements copy on write semantics,..."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{mxnet::BaseExpr\n||+ BaseExpr()\l+ BaseExpr()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1BaseExpr.html",tooltip="Managed reference to BaseExprNode."];
  Node3 -> Node4 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{mxnet::PrimExpr\n||+ PrimExpr()\l+ PrimExpr()\l+ PrimExpr()\l+ PrimExpr()\l+ PrimExpr()\l+ dtype()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1PrimExpr.html",tooltip="Reference to PrimExprNode."];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node5 [label="{mxnet::FloatImm\n||+ FloatImm()\l+ FloatImm()\l+ FloatImm()\l+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1FloatImm.html",tooltip="Managed reference class to FloatImmNode."];
  Node4 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 [label="{mxnet::IntImm\n||+ IntImm()\l+ IntImm()\l+ IntImm()\l+ operator-\>()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1IntImm.html",tooltip="Managed reference class to IntImmNode."];
  Node1 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node7 [label="{mxnet::NDArrayHandle\n||+ NDArrayHandle()\l+ getArray()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1NDArrayHandle.html",tooltip=" "];
  Node1 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node8 [label="{mxnet::runtime::ADT\n||+ ADT()\l+ ADT()\l+ ADT()\l+ operator[]()\l+ tag()\l+ size()\l+ Tuple()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1runtime_1_1ADT.html",tooltip="reference to algebraic data type objects."];
  Node1 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{mxnet::runtime::Float\n||+ Float()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1runtime_1_1Float.html",tooltip=" "];
  Node1 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{mxnet::runtime::Integer\n||+ Integer()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1runtime_1_1Integer.html",tooltip=" "];
  Node1 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node11 [label="{mxnet::runtime::Map\l\< K, V, typename, typename \>\n||+ Map()\l+ Map()\l+ Map()\l+ operator=()\l+ operator=()\l+ Map()\l+ Map()\l+ Map()\l+ Map()\l+ at()\land 10 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1runtime_1_1Map.html",tooltip="Map container of NodeRef->NodeRef in DSL graph. Map implements copy on write semantics,..."];
  Node1 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{mxnet::runtime::Slice\n|+ kNoneValue\l|+ Slice()\l+ Slice()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1runtime_1_1Slice.html",tooltip=" "];
  Node1 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node13 [label="{mxnet::runtime::String\n||+ String()\l+ String()\l+ String()\l+ operator=()\l+ operator=()\l+ compare()\l+ compare()\l+ compare()\l+ c_str()\l+ size()\l+ length()\l+ empty()\l+ data()\l+ operator std::string()\l+ MXNET_DEFINE_NOTNULLABLE\l_OBJECT_REF_METHODS()\l+ CanConvertFrom()\l+ HashBytes()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1runtime_1_1String.html",tooltip="Reference to string objects."];
}
