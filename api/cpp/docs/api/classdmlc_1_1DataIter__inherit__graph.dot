digraph "dmlc::DataIter&lt; DType &gt;"
{
 // LATEX_PDF_SIZE
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{dmlc::DataIter\< DType \>\n||+ ~DataIter()\l+ BeforeFirst()\l+ Next()\l+ Value()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black",tooltip="data iterator interface this is not a C++ style iterator, but nice for data pulling:) This interface ..."];
  Node1 -> Node2 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{dmlc::ThreadedIter\l\< DType \>\n||+ ThreadedIter()\l+ ~ThreadedIter()\l+ Destroy()\l+ set_max_capacity()\l+ Init()\l+ Init()\l+ Next()\l+ Recycle()\l+ ThrowExceptionIfSet()\l+ ClearException()\l+ Next()\l+ Value()\l+ BeforeFirst()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classdmlc_1_1ThreadedIter.html",tooltip="a iterator that was backed by a thread to pull data eagerly from a single producer into a bounded buf..."];
  Node1 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node3 [label="{mxnet::IIterator\< DType \>\n|+ data_names\l|+ Init()\l+ BeforeFirst()\l+ Next()\l+ Value()\l+ ~IIterator()\l+ SetDataName()\l+ GetLenHint()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classmxnet_1_1IIterator.html",tooltip="iterator type"];
}
